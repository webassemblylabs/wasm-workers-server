const std = @import("std");
const wws = @import("wws");

const tmpl =
    \\<!DOCTYPE html>
    \\<head>
    \\<title>Wasm Workers Server</title>
    \\<meta name="viewport" content="width=device-width,initial-scale=1">
    \\<meta charset="UTF-8">
    \\<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/water.css">
    \\<style>
    \\body {{ max-width: 1000px; }}
    \\main {{ margin: 5rem 0; }}
    \\h1, p {{ text-align: center; }}
    \\h1 {{ margin-bottom: 2rem; }}
    \\pre {{ font-size: .9rem; }}
    \\pre > code {{ padding: 2rem; }}
    \\p {{ margin-top: 2rem; }}
    \\</style>
    \\</head>
    \\<body>
    \\<main>
    \\<h1>Hello from Wasm Workers Server üëã</h1>
    \\<pre><code>Replying to {s}
    \\Method: {d}
    \\User Agent: {s}
    \\Payload: {s}</code></pre>
    \\<p>
    \\This page was generated by a Zig‚ö°Ô∏è file running in WebAssembly.
    \\</p>
    \\</main>
    \\</body>
;

fn handle(arena: std.mem.Allocator, request: wws.Request) !wws.Response {
    const payload = if (request.body.len == 0) "-" else request.body;

    const body = try std.fmt.allocPrint(arena, tmpl, .{ request.url, request.method, "-", payload });

    var response = wws.Response{
        .data = body,
    };

    try response.headers.map.put(arena, "x-generated-by", "wasm-workers-server");

    return response;
}

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();

    const parse_result = try wws.parseStream(gpa.allocator(), .{});
    defer parse_result.deinit();

    var arena = std.heap.ArenaAllocator.init(gpa.allocator());
    defer arena.deinit();

    const request = parse_result.value;
    const response = try handle(arena.allocator(), request);

    const stdout = std.io.getStdOut();
    try wws.writeResponse(response, stdout.writer());
}
